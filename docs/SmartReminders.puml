@startuml Smart Reminders Architecture
!theme plain
skinparam backgroundColor transparent
skinparam componentStyle rectangle

package "Riot API" {
  [Live Game Data] as riot
}

package "Game Manager Context" {
  [RiotApi] as riotApi
  [GameStateBuilder] as stateBuilder
  [GameState] as gameState
  [EventEmitter] as eventEmitter
  [GameTickEvent] as gameTick
}

package "Coaching Context" {
  [CoachingModule] as coaching
  [CoachingGameState] as coachingState
  [ReminderSystem] as reminders
  [AudioPlayer] as audio
}

' Data flow
riot --> riotApi : Raw game data
riotApi --> stateBuilder : Raw data
stateBuilder --> gameState : Processed game state
gameState --> eventEmitter : State updates
eventEmitter --> gameTick : Emits game-tick events
gameTick --> coaching : Rich game state

' Coaching internal flow
coaching --> coachingState : Builds from game-tick events
coachingState --> reminders : Checks against state buffer
reminders --> audio : Plays when triggered

note right of stateBuilder
  Transforms raw Riot data
  into meaningful game state
  (dragon status, player stats, etc.)
end note

note right of gameState
  Owns complete game state
  Manages state transitions
  Single source of truth
end note

note right of coachingState
  Maintains state buffer
  Detects patterns across ticks
  Builds coaching-specific insights
end note

note right of reminders
  Smart reminder triggers
  (gold gained, CS patterns,
  objective timing, etc.)
end note

note right of coaching
  Consumes game-tick events
  Builds own domain state
  Independent from Game Manager
end note
@enduml