@startuml Smart Reminders Architecture
!theme plain
skinparam backgroundColor transparent
skinparam componentStyle rectangle

package "Riot API" {
  [Live Game Data] as riot
}

package "Shared Kernel" {
  [GameDetectionService] as detection
  [EventBus] as eventBus
  [GameTickEvent] as gameTick
}

package "Coaching Context" {
  [CoachingModule] as coaching
  [CoachingGameState] as coachingState
  [ReminderSystem] as reminders
  [AudioPlayer] as audio
}

' Data flow
riot --> detection : Raw game data
detection --> eventBus : Publishes events
eventBus --> coaching : Subscribes to events
coaching --> coachingState : Builds from events
coaching --> reminders : Checks against state
reminders --> audio : Plays when triggered

' Event flow
detection --> gameTick : Only new events
gameTick --> coaching : Clean event stream

note right of detection
  Tracks processed events
  Deduplicates before publishing
end note

note right of coaching
  Transforms shared events
  Builds coaching-specific state
  Owns reminder logic
end note

note right of coachingState
  Coaching interpretation
  of game state
  (deaths, kills, objectives)
end note

note right of reminders
  Checks if reminders
  should trigger based
  on current state
end note
@enduml