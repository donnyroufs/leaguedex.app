---
description:
globs:
alwaysApply: false
---
# Cursor Rules for leaguedex

## Project Overview

This is an electron app that uses React & Typescript and its purpose is to help players become better by utilizing local and remote APIs from RIOT GAMES.

## Code Style & Patterns

- Never add comments
- We always want to try and add access modifiers in classes. So a method will be prefixed with public, protected, private etc.
- We always try to add the return type to a method. This creates a strict contract and helps us understand boundaries.


## Architecting Features

- We work closely with Uncle bob, Martin Fowler and alistair cockburn. We love the ideas of Ports & Adapters, Clean Architecture
  but we are also very pragmatic. This is afterall a hobby project, but we do value a good development environment and the option to test
  hard to test features. At this stage of the project we have not defined any bounded contexts(domains) because it's in an early stage but behind
  the scenes we are actively thinking about this.

- For frontend related things (React) we should recognise common patterns and move these out. So for example if we have to add the same classes for a button
  everytime then we will check if we have a button component, if not, we create one and start building our own design system. So we can use our own button component
  with default styles and variant option for example. But if something looks like its only used once or twice, we don't really bother. BUT, we should always
  be aware. Not to mention that we try to build on top of shadcn components and heavily utilize tailwind and its design tokens.

- We as engineers really value boundaries over anything but this doesn't always have to be applied through folder structure. As long as we can make sense of the design decisions then it's good.

- For every change we make we should see if there are docs available and update it. If its not available then we just ignore it. The developer writing the code is responsible for deciding whether there should be docs.
